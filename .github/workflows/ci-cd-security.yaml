name: Security CI-CD

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/ci-cd-security.yaml"
      - "security/**"
      - "infrastructure/**"
      - "!infrastructure/lib/*-stack.ts"
      - "infrastructure/lib/security-stack.ts"
      - "!infrastructure/test/**"
      - "!**.md"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('security/poetry.lock', 'security/poetry.toml') }}
      - name: Configure poetry for ci
        working-directory: ./security
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        working-directory: ./security
        run: |
          poetry install --no-root
      - name: Test with pytest
        working-directory: ./security
        env:
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          poetry run pytest

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v2.1.3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('security/poetry.lock', 'security/poetry.toml') }}
      - name: Configure poetry for ci
        working-directory: ./security
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        working-directory: ./security
        run: |
          poetry install
      - name: Build packages
        working-directory: ./security
        run: poetry build
      - name: Upload artifacts for release
        uses: actions/upload-artifact@v2.2.1
        with:
          name: wheel
          path: security/dist/

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v2
      - name: set up node
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: cache node modules
        id: cache-node_modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: infrastructure/node_modules
          key: ${{ runner.os }}-infrastructure-${{ env.cache-name }}-${{ hashFiles('infrastructure/package-lock.json') }}
      - name: install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        working-directory: ./infrastructure
        run: npm install
      - name: deploy
        working-directory: ./infrastructure
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          AWS_OPEN_ALCHEMY_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_CERTIFICATE_ARN }}
          AWS_OPEN_ALCHEMY_API_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_API_CERTIFICATE_ARN }}
          AWS_IDENTITY_PROVIDER_ARN: ${{ secrets.AWS_IDENTITY_PROVIDER_ARN }}
        run: |
          npm run deploy:security

  release-required:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check.outputs.result }}
      project-version: ${{ steps.check.outputs.project-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install poetry and package
        run: pip install poetry open-alchemy.package-security
      - name: Check if release is required
        id: check
        working-directory: ./security
        run: |
          RELEASED_VERSION=$(python -c "from importlib.metadata import version;print(version('open-alchemy.package-security'))")
          echo released version: $RELEASED_VERSION
          PROJECT_VERSION=$(poetry version -s)
          echo project version: $PROJECT_VERSION
          [[ "$RELEASED_VERSION" == "$PROJECT_VERSION"  ]] && RESULT=false || RESULT=true
          echo release required: $RESULT
          echo "::set-output name=project-version::$PROJECT_VERSION"
          echo "::set-output name=result::$RESULT"

  release-test-pypi:
    runs-on: ubuntu-latest
    needs:
      - test
      - build
      - release-required
    steps:
      - name: Retrieve packages
        if: needs.release-required.outputs.result == 'true'
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        if: needs.release-required.outputs.result == 'true'
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          password: ${{ secrets.test_pypi_password_security }}
          repository_url: https://test.pypi.org/legacy/

  test-production-test-pypi:
    runs-on: ubuntu-latest
    needs:
      - deploy
      - release-test-pypi
      - release-required
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: install dependencies
        env:
          PYPI_MIRROR: https://test.pypi.org/simple/
          VERSION: ${{ needs.release-required.outputs.project-version }}
        working-directory: test/security
        run: |
          pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev
      - name: run tests
        working-directory: test/security
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          pipenv run test

  release-pypi:
    runs-on: ubuntu-latest
    needs:
      - test-production-test-pypi
      - release-required
    steps:
      - name: Retrieve packages
        if: needs.release-required.outputs.result == 'true'
        uses: actions/download-artifact@v2.0.7
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        if: needs.release-required.outputs.result == 'true'
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          password: ${{ secrets.pypi_password_security }}

  test-production-pypi:
    runs-on: ubuntu-latest
    needs:
      - deploy
      - release-pypi
      - release-required
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: install dependencies
        env:
          PYPI_MIRROR: https://pypi.org/simple/
          VERSION: ${{ needs.release-required.outputs.project-version }}
        working-directory: test/security
        run: |
          pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev || sleep 30 && pipenv install --dev
      - name: run tests
        working-directory: test/security
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
        run: |
          pipenv run test
