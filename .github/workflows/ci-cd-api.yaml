name: CI-CD for the OpenAlchemy Package API

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/ci-cd-api.yaml"
      - "api/**"
      - "infrastructure/**"
      - "infrastructure/lib/api-stack.ts"
      - "!infrastructure/lib/*-stack.ts"
      - "!infrastructure/test/**"
      - "!**.md"

jobs:
  api-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/api/Pipfile.lock') }}
      - name: install dependencies
        working-directory: ./api
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev
      - name: run tests
        working-directory: ./api
        run: |
          pipenv run test

  api-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: cache build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: api/dist/deployment-package.zip
          key: ${{ runner.os }}-api-${{ env.cache-name }}-${{ hashFiles('api/**') }}
      - name: set up python
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install pipenv
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: create package
        working-directory: ./api
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          pipenv lock -r > requirements.txt
          pip install -r requirements.txt --target dist
          cp -r api.py app.py openapi library dist/
          cd dist
          zip -r deployment-package.zip .
      - name: upload artifacts for release
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api/dist/deployment-package.zip

  api-deploy:
    runs-on: ubuntu-latest
    needs:
      - api-test
      - api-build
    steps:
      - uses: actions/checkout@v2
      - name: set up node
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: cache node modules
        id: cache-node_modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: infrastructure/node_modules
          key: ${{ runner.os }}-infrastructure-${{ env.cache-name }}-${{ hashFiles('**/infrastructure/package-lock.json') }}
      - name: install dependencies
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        working-directory: ./infrastructure
        run: npm install
      - name: retrieve api deployment package
        uses: actions/download-artifact@v2
        with:
          name: api
          path: infrastructure/resources/api/
      - name: deploy
        working-directory: ./infrastructure
        env:
          STACK: PackageApiStack
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "us-east-1"
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          AWS_OPEN_ALCHEMY_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_CERTIFICATE_ARN }}
          AWS_OPEN_ALCHEMY_API_CERTIFICATE_ARN: ${{ secrets.AWS_OPEN_ALCHEMY_API_CERTIFICATE_ARN }}
          AWS_IDENTITY_PROVIDER_ARN: ${{ secrets.AWS_IDENTITY_PROVIDER_ARN }}
        run: |
          npm run deploy:api
